// cannot use let here, some reason, i guess its a scoping issue (due to let)
var onRun = (context) => {
	(context => {
	    // grab the IJ context
	    const iconJar = SBApplication.applicationWithBundleIdentifier("com.iconjar.iconjar");
	    const {document} = context;

	    const selectedLayers = document.selectedLayers().layers();
	    const selectedCount = selectedLayers.length;

	    // make sure we have a selection
	    if(selectedCount === 0) {
	        document.showMessage('Please select layers to export to IconJar.');
	        return;
	    }

	    // work out base directory
	    const baseDir = NSTemporaryDirectory();

	    // work out format
	    const plugin = iconJar.plugin("com.iconjar.integration.sketch");
	    const pluginOptions = JSON.parse(plugin.options());
	    let format = null;

	    // format is based on IconJar's plugin format
	    // option which is set in the prefs
	    switch(parseInt(pluginOptions.format)) {
	        default:
	        case 1: {
	            format = 'svg';
	            break;
	        }
	        case 2: {
	            format = 'pdf';
	            break;
	        }
	        case 3: {
	            format = 'png';
	            break;
	        }
	        case 4: {
	            format = 'webp';
	            break;
	        }
	    }

	    // method for actually exporting each slice
	    const processSlices = () => {
	        // iterate over the selected layers
	        const layerNamesUsed = {};
	        const exported = [];
	        for(let i = 0; i < selectedCount; i++) {
	            const layer = selectedLayers[i];
	            let proposedName = layer.name();
	            if(proposedName.length === 0) {
	                proposedName = 'layer';
	            }
	            let used = layerNamesUsed[proposedName];
	            if(typeof(used) !== 'undefined') {
	                used++;
	                layerNamesUsed[proposedName] = used;
	                proposedName = proposedName+'.'+used;
	            } else {
	                layerNamesUsed[proposedName] = 0;
	            }
	            const file = baseDir + proposedName + '.' + format;
	            const sliceAncestry = MSImmutableLayerAncestry.ancestryWithMSLayer(layer);
	            const  rect = MSSliceTrimming.trimmedRectForLayerAncestry(sliceAncestry);
	            const slices = MSExportRequest.exportRequestsFromExportableLayer_inRect_useIDForName(layer, rect, false);
	            let slice = null;
	            if(slices.count() > 0) {
	                slice = slices[0];
	                slice.scale = 1;
	                slice.format = format;
	            }
	            document.saveArtboardOrSlice_toFile(slice, file);
	            exported.push(file);
	        }
	        return exported;
	    }

	    // method to tell IconJar to open and show import
	    // sheet with files
	    iconJar.import_intoCollection_fromApplication(processSlices(), null, "Sketch");
	})(context);	
};